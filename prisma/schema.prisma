
generator client {
  provider   = "prisma-client"
  engineType = "client"
  output     = "../src/lib/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Topic {
  id        String      @id @default(uuid())
  name      String
  meta      String?
  status    TopicStatus @default(GENERATING_QUES)
  questions Question[]
  outline   Outline?

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("topics")
}

enum TopicStatus {
  GENERATING_QUES
  GETTING_ANS
  GOT_ANS
  FAILED
}

model Question {
  id        String   @id @default(uuid())
  title     String
  options   Option[]
  answer    String?
  for_topic Topic    @relation(fields: [topic_id], references: [id], onDelete: Cascade)
  topic_id  String

  @@map("questions")
}

model Option {
  id           Int       @id @default(autoincrement())
  content      String
  for_question Question? @relation(fields: [question_id], references: [id], onDelete: Cascade)
  question_id  String?
}

model Outline {
  id       String        @id @default(uuid())
  status   OutlineStatus @default(GENERATING)
  chapters Chapter[]
  topic    Topic         @relation(fields: [topic_id], references: [id], onDelete: Cascade)
  topic_id String        @unique

  @@map("outlines")
}

enum OutlineStatus {
  GENERATING
  GENERATED
  FAILED
}

model Chapter {
  id          String   @id @default(uuid())
  name        String
  for_outline Outline  @relation(fields: [outline_id], references: [id], onDelete: Cascade)
  outline_id  String
  lessons     Lesson[]

  @@map("chapters")
}

model Lesson {
  id          String       @id @default(uuid())
  name        String
  status      LessonStatus @default(WAITING_FOR_APPROVAL)
  content     String?
  for_chapter Chapter      @relation(fields: [chapter_id], references: [id], onDelete: Cascade)
  chapter_id  String

  @@map("lessons")
}

enum LessonStatus {
  WAITING_FOR_APPROVAL
  GENERATING
  GENERATED
  FAILED
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  topics        Topic[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}
